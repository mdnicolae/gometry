name: Go CI with Conditional Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag_type:
        description: 'Specify the version increment type: patch, minor, or major'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test:
    name: Run Go Tests
    runs-on: ubuntu-latest

    outputs:
      tests_passed: ${{ steps.tests_passed.outcome == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go 1.22
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        id: tests_passed
        run: go test ./...

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'workflow_dispatch' && needs.test.outputs.tests_passed == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go 1.22
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Determine Next Tag Version
        id: tag_version
        run: |
          # Check if there is an existing tag
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Split the version into major, minor, and patch
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"

          # Determine increment based on input
          case "${{ github.event.inputs.tag_type }}" in
            major) major=$((major + 1)); minor=0; patch=0 ;;
            minor) minor=$((minor + 1)); patch=0 ;;
            patch) patch=$((patch + 1)) ;;
          esac

          # Construct new tag
          new_tag="v$major.$minor.$patch"
          echo "New tag: $new_tag"
          echo "tag=$new_tag" >> $GITHUB_ENV

      - name: Create and Push New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag -a "$tag" -m "Release $tag"
          git push origin "$tag"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          release_name: "Release ${{ env.tag }}"
          body: "Automated release based on successful tests."
          draft: false
          prerelease: false